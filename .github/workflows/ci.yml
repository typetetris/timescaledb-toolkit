name: CI
on:
  pull_request:
  push:
    branches:
    - main
    - staging
    - trying
  schedule:
    # we build at 8am UTC, 3am Eastern, midnight Pacific
    - cron:  '0 8 * * 1-4'
  workflow_dispatch:
    inputs:
      container-image:
        description: 'Container image to pull from DockerHub'
        required: false

jobs:
  testpostgres:
    name: Test Postgres
    runs-on: ubuntu-20.04
    container:
      image: ${{ inputs.container-image || 'timescaledev/toolkit-builder:debian-11-amd64' }}
    strategy:
      matrix:
        pgversion: [12, 13, 14, 15]
    env:
      # TODO Why?  Cargo default is to pass `-C incremental` to rustc; why don't we want that?
      #   https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental
      #   Well turning it off takes the extension target size down from 3G to 2G...
      CARGO_INCREMENTAL: 0
      # TODO Why?  If we're concerned about trouble fetching crates, why not
      #  just fetch them once at the time we select a dependency?
      #  Errors fetching crates are probably rare enough that we don't see the
      #  need to bother, but then why not just let the build fail?
      CARGO_NET_RETRY: 10
      # TODO What reads this?  It's not listed on
      #  https://doc.rust-lang.org/cargo/reference/environment-variables.html
      CI: 1
      RUST_BACKTRACE: short

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    # Github Actions provides a bind mounted working directory for us, where
    # the above checkout happens, and where caches are read from and restored
    # to, and it's all owned by 1001.  Our container image is `USER root` so
    # we have no problem writing anywhere, but we run some things as user
    # 'postgres', which used to be user 1000 but is now 1001.  Hoping in the
    # future to make our container image `USER postgres` and further simplify
    # this file and the packaging Actions file, but it's non-trivial.
    - name: chown Repository
      run: chown -R postgres .

    # TODO After the container image contains a primed target dir, is this still worth it?
    #   Only possible advantage is this one is per-pg-version but what's the impact?
    - name: Cache cargo target dir
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-test-pg${{ matrix.pgversion }}-target-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}
        restore-keys: ${{ runner.os }}-test-pg${{ matrix.pgversion }}-target-

    - name: Run pgx tests
      run: su postgres -c 'sh tools/build -pg${{ matrix.pgversion }} test-extension 2>&1'

    - name: Run doc tests
      run: su postgres -c 'sh tools/build -pg${{ matrix.pgversion }} test-doc 2>&1'

  testcrates:
    name: Test Crates
    runs-on: ubuntu-20.04
    container:
      image: ${{ inputs.container-image || 'timescaledev/toolkit-builder:debian-11-amd64' }}
      env:
        CARGO_INCREMENTAL: 0
        CARGO_NET_RETRY: 10
        CI: 1
        RUST_BACKTRACE: short

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: chown Repository
      run: chown -R postgres .

    - name: Cache cargo target dir
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-test-crates-target-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}
        restore-keys: ${{ runner.os }}-test-crates-target-

    - name: Run Crates Tests
      run: su postgres -c 'sh tools/build test-crates 2>&1'

  testupdates:
    name: Test Updates
    runs-on: ubuntu-20.04
    container:
      image: ${{ inputs.container-image || 'timescaledev/toolkit-builder:debian-11-amd64' }}
      env:
        PGVERSION: 14

        CARGO_INCREMENTAL: 0
        CARGO_NET_RETRY: 10
        CI: 1
        RUST_BACKTRACE: short

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: chown Repository
      run: chown -R postgres .

    - name: Cache cargo target dir
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-test-updates-target-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}
        restore-keys: ${{ runner.os }}-test-crates-target-

    # TODO Drop this.
    - name: Cache old versions dir
      uses: actions/cache@v3
      with:
        path: old-versions
        key: ${{ runner.os }}-test-old-versions-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}
        restore-keys: ${{ runner.os }}-test-old-versions-

    - name: Run binary update tests
      # TODO We've always tested only one postgres version here.  We test them all at release
      #  time anyway.  If we want to test them here, too, let's make it less slow first.
      run: |
        su postgres -c 'OS_NAME=debian OS_VERSION=11 tools/testbin -version no -bindir / -dbroot /tmp/db -pgport 28800 -pgversions 14 ci 2>&1'

    - name: Check tools/testbin
      run: sh tools/testbin check-control
